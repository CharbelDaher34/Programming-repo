/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Components.Forms;

import Components.Class.Helper;
import static Components.Class.Helper.isAnyFieldEmpty;
import static Components.Main.connection;
import static Components.Main.statement;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.*;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class Admin extends javax.swing.JFrame {

    private Map<String, String> optionsVals = new HashMap<>();

    /**
     * Creates new form addSeat
     */
    public Admin() {
        initComponents();

        // Add ticket classes and their special treatments to the dictionary
        optionsVals.put("E", "Complimentary in-flight meals,Access to in-flight entertainment");
        optionsVals.put("P", "Enhanced comfort with extra legroom,Priority boarding");
        optionsVals.put("B", "Access to exclusive airport lounges,Lie-flat seats for a comfortable sleep");
        optionsVals.put("F", "Private suites with luxurious amenities,Gourmet dining with personalized service");
        optionsVals.put("S", "Private cabins with dedicated butlers,Exclusive services like private chauffeur transfers");

        Map<Character, String> ticketClasses = new HashMap<>();

        // Add ticket classes to the dictionary
        ticketClasses.put('E', "Economy Class");
        ticketClasses.put('P', "Premium Economy Class");
        ticketClasses.put('B', "Business Class");
        ticketClasses.put('F', "First Class");
        ticketClasses.put('S', "Suites/Residences");
        ecoClass.addItem("Economy Class");

        ecoClass.addItem("Premium Economy Class");
        ecoClass.addItem("Business Class");
        ecoClass.addItem("First Class");
        ecoClass.addItem("Suites/Residences");

        updateDb();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JButton back = new javax.swing.JButton();
        ecoClass = new javax.swing.JComboBox<>();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        options = new javax.swing.JTextField();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        seatNo = new javax.swing.JTextField();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        flightNo = new javax.swing.JTextField();
        javax.swing.JButton addSeat = new javax.swing.JButton();
        javax.swing.JDesktopPane jDesktopPane1 = new javax.swing.JDesktopPane();
        departureDate = new javax.swing.JSpinner();
        javax.swing.JLabel jLabel11 = new javax.swing.JLabel();
        arrivalDate = new javax.swing.JSpinner();
        javax.swing.JLabel jLabel12 = new javax.swing.JLabel();
        departurePlace = new javax.swing.JTextField();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        landingPlace = new javax.swing.JTextField();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        seatTable = new javax.swing.JTable();
        javax.swing.JButton deleteSeat = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        javax.swing.JButton print = new javax.swing.JButton();
        javax.swing.JButton update = new javax.swing.JButton();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JButton editReservation = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Components/Forms/Bundle"); // NOI18N
        back.setText(bundle.getString("Admin.back.text")); // NOI18N
        back.setName("back"); // NOI18N
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        ecoClass.setSelectedItem("E");
        ecoClass.setName("ecoClass"); // NOI18N
        ecoClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ecoClassItemStateChanged(evt);
            }
        });
        ecoClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ecoClassActionPerformed(evt);
            }
        });
        ecoClass.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                ecoClassPropertyChange(evt);
            }
        });

        jLabel2.setText(bundle.getString("Admin.jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        options.setEditable(false);
        options.setText(bundle.getString("Admin.options.text")); // NOI18N
        options.setName("options"); // NOI18N

        jLabel3.setText(bundle.getString("Admin.jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText(bundle.getString("Admin.jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        seatNo.setText(bundle.getString("Admin.seatNo.text")); // NOI18N
        seatNo.setName("seatNo"); // NOI18N

        jLabel5.setText(bundle.getString("Admin.jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        flightNo.setText(bundle.getString("Admin.flightNo.text")); // NOI18N
        flightNo.setName("flightNo"); // NOI18N

        addSeat.setText(bundle.getString("Admin.addSeat.text")); // NOI18N
        addSeat.setName("addSeat"); // NOI18N
        addSeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSeatActionPerformed(evt);
            }
        });

        jDesktopPane1.setName("jDesktopPane1"); // NOI18N

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 278, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 28, Short.MAX_VALUE)
        );

        departureDate.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(1706379720000L), new java.util.Date(), new java.util.Date(2027092920000L), java.util.Calendar.DAY_OF_WEEK));
        departureDate.setName("departureDate"); // NOI18N

        jLabel11.setText(bundle.getString("Admin.jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        arrivalDate.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(1706379720000L), new java.util.Date(), new java.util.Date(2027092920000L), java.util.Calendar.DAY_OF_MONTH));
        arrivalDate.setName("arrivalDate"); // NOI18N

        jLabel12.setText(bundle.getString("Admin.jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        departurePlace.setText(bundle.getString("Admin.departurePlace.text")); // NOI18N
        departurePlace.setName("departurePlace"); // NOI18N

        jLabel7.setText(bundle.getString("Admin.jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        landingPlace.setText(bundle.getString("Admin.landingPlace.text")); // NOI18N
        landingPlace.setName("landingPlace"); // NOI18N

        jLabel8.setText(bundle.getString("Admin.jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        seatTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "flightNo", "seatNo", "class", "options", "departureDate", "departureTime", "departurePlace", "arrivalDate", "arrivalTime", "landingPlace"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        seatTable.setName("seatTable"); // NOI18N
        seatTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                seatTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(seatTable);

        deleteSeat.setText(bundle.getString("Admin.deleteSeat.text")); // NOI18N
        deleteSeat.setName("deleteSeat"); // NOI18N
        deleteSeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSeatActionPerformed(evt);
            }
        });

        reset.setText(bundle.getString("Admin.reset.text")); // NOI18N
        reset.setActionCommand(bundle.getString("Admin.reset.actionCommand")); // NOI18N
        reset.setName("reset"); // NOI18N
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        print.setText(bundle.getString("Admin.print.text")); // NOI18N
        print.setName("print"); // NOI18N
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        update.setText(bundle.getString("Admin.update.text")); // NOI18N
        update.setName("update"); // NOI18N
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(bundle.getString("Admin.jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        editReservation.setText(bundle.getString("Admin.editReservation.text")); // NOI18N
        editReservation.setName("editReservation"); // NOI18N
        editReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editReservationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(154, 154, 154))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 852, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(29, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(flightNo, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(seatNo, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ecoClass, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(options, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(departurePlace, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(departureDate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel11)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(landingPlace, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(arrivalDate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel8))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 276, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addSeat)
                                .addGap(18, 18, 18)
                                .addComponent(editReservation)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(deleteSeat, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(258, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(back)
                                    .addComponent(print, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(231, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(306, 306, 306))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {arrivalDate, departureDate, departurePlace, ecoClass, flightNo, jLabel11, jLabel12, jLabel2, jLabel3, jLabel4, jLabel5, jLabel7, jLabel8, landingPlace, options, seatNo});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(flightNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(seatNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(ecoClass, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(departurePlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(departureDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(arrivalDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(landingPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addSeat)
                            .addComponent(editReservation))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteSeat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(print)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(update)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(back)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        Helper.clearForm(this.getContentPane());
        dispose();
        Login LoginFrm = new Login();
        LoginFrm.show();        // TODO add your handling code here:
    }//GEN-LAST:event_backActionPerformed

    private void ecoClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ecoClassActionPerformed

        String selectedClass = (String) ecoClass.getSelectedItem();

        String classKey = selectedClass.substring(0, 1);
        String classOptions = optionsVals.get(classKey);
        options.setText(classOptions);  // TODO add your handling code here:
    }//GEN-LAST:event_ecoClassActionPerformed

    private void ecoClassPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_ecoClassPropertyChange

        // TODO add your handling code here:
    }//GEN-LAST:event_ecoClassPropertyChange

    private void ecoClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ecoClassItemStateChanged
    }//GEN-LAST:event_ecoClassItemStateChanged

    private void addSeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSeatActionPerformed
        try {
            if (isAnyFieldEmpty(this)) {
                JOptionPane.showMessageDialog(null, "Enter all Values!");
                return;

            }
            int flightNoo = 0;

            if (flightNo.getText().matches("\\d+")) {

                flightNoo = Integer.parseInt(flightNo.getText());
            } else {
                JOptionPane.showMessageDialog(null, "flightNo must be an Integer!");

                flightNo.setText("");
                return;
            }
            String seatNoo = seatNo.getText();
            //    JOptionPane.showMessageDialog(null, "batata");

            String checkExistQuery = "SELECT COUNT(*) FROM seat WHERE seatNo=?";
            PreparedStatement preparedStatement = connection.prepareStatement(checkExistQuery);
            preparedStatement.setString(1, seatNoo);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                //   JOptionPane.showMessageDialog(null, "entered the arena!");

                int count = resultSet.getInt(1);
                //      JOptionPane.showMessageDialog(null, count);
//
                if (count >= 1) {
                    seatNo.setText("");
                    JOptionPane.showMessageDialog(null, "Seat already exist");

                    return;
                }

            }

            String ecoClasss = (String) ecoClass.getSelectedItem();
            ecoClasss = ecoClasss.substring(0, 1);

            String optionss = options.getText();

            String dateDep = departureDate.getValue().toString();
            String dateArr = arrivalDate.getValue().toString();
            Date date = null;
            SimpleDateFormat sdf = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
            SimpleDateFormat outputSdf = new SimpleDateFormat("M/d/yy, hh:mm aa");
            java.sql.Date sqlDepDate;
            java.sql.Time sqlDepTime;
            java.sql.Date sqlArrDate;
            java.sql.Time sqlArrTime;
            try {
                date = sdf.parse(dateArr);
                String formattedDate = outputSdf.format(date);
                sqlDepDate = new java.sql.Date(date.getTime());
                sqlDepTime = new java.sql.Time(date.getTime());

                date = sdf.parse(dateDep);
                formattedDate = outputSdf.format(date);
                sqlArrDate = new java.sql.Date(date.getTime());
                sqlArrTime = new java.sql.Time(date.getTime());

            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null, "Parsing Done wrong");
                return;
            }

            String landingPlacee = landingPlace.getText();
            String departurePlacee = departurePlace.getText();

            String insertSeatQuery = "INSERT INTO seat (flightNo, seatNo, class, options, departureDate, departureTime, departurePlace, arrivalDate, arrivalTime, landingPlace) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            preparedStatement = connection.prepareStatement(insertSeatQuery);
            preparedStatement.setInt(1, flightNoo);
            preparedStatement.setString(2, seatNoo);
            preparedStatement.setString(3, String.valueOf(ecoClasss));
            preparedStatement.setString(4, optionss);
            preparedStatement.setDate(5, sqlDepDate);
            preparedStatement.setTime(6, sqlDepTime);
            preparedStatement.setString(7, departurePlacee);
            preparedStatement.setDate(8, sqlArrDate);
            preparedStatement.setTime(9, sqlArrTime);
            preparedStatement.setString(10, landingPlacee);

            int rowsAffected = preparedStatement.executeUpdate();
            JOptionPane.showMessageDialog(null, "Added!");
            updateDb();
            Helper.clearForm(this.getContentPane());
            clearThisForm();
            SpinnerDateModel dateModel = new SpinnerDateModel(new Date(), null, null, Calendar.HOUR_OF_DAY);
            dateModel.setValue(new Date()); // Set the initial value to the current date

            departureDate.setModel(dateModel);
            arrivalDate.setModel(dateModel);
            // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addSeatActionPerformed

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
// Format departureDate and arrivalDate to desired format
        SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yy, hh:mm aa");
        String formattedDepartureDate = dateFormat.format(departureDate.getValue());
        String formattedArrivalDate = dateFormat.format(arrivalDate.getValue());

        String message = "Seat Number: " + seatNo.getText() + "\n"
                + "Flight Number: " + flightNo.getText() + "\n"
                + "Class: " + ecoClass.getSelectedItem().toString() + "\n"
                + "Options: " + optionsVals.get(ecoClass.getSelectedItem().toString().charAt(0)) + "\n"
                + "Departure Date: " + formattedDepartureDate + "\n"
                + "Departure Place: " + departurePlace.getText() + "\n"
                + "Arrival Date: " + formattedArrivalDate + "\n"
                + "Landing Place: " + landingPlace.getText() + "\n";

// Display the row data in a dialog box
        JOptionPane.showMessageDialog(null, message, "Seat Details", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_printActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        clearThisForm();
    }//GEN-LAST:event_resetActionPerformed

    private void seatTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seatTableMouseClicked
        DefaultTableModel tableModel = (DefaultTableModel) seatTable.getModel();
        int selectedRow = seatTable.getSelectedRow();
//        flightNo.setText(tableModel.getValueAt(selectedRow,1).toString());
//                seatNo.setText(tableModel.getValueAt(selectedRow,2).toString());

        int selectedFlightNo = (int) tableModel.getValueAt(selectedRow, 0); // Assuming flightNo is in the first column (index 0)
        String selectedSeatNo = tableModel.getValueAt(selectedRow, 1).toString(); // Assuming seatNo is in the second column (index 1)
        String selectedSeatClass = tableModel.getValueAt(selectedRow, 2).toString(); // Assuming seatClass is in the third column (index 2)
        String selectedOptions = tableModel.getValueAt(selectedRow, 3).toString(); // Assuming options is in the fourth column (index 3)
        java.sql.Date selectedDepartureDate = (java.sql.Date) tableModel.getValueAt(selectedRow, 4); // Assuming departureDate is in the fifth column (index 4)
        java.sql.Time selectedDepartureTime = (java.sql.Time) tableModel.getValueAt(selectedRow, 5); // Assuming departureTime is in the sixth column (index 5)
        String selectedDeparturePlace = tableModel.getValueAt(selectedRow, 6).toString(); // Assuming departurePlace is in the seventh column (index 6)
        java.sql.Date selectedArrivalDate = (java.sql.Date) tableModel.getValueAt(selectedRow, 7); // Assuming arrivalDate is in the eighth column (index 7)
        java.sql.Time selectedArrivalTime = (java.sql.Time) tableModel.getValueAt(selectedRow, 8); // Assuming arrivalTime is in the ninth column (index 8)
        String selectedLandingPlace = tableModel.getValueAt(selectedRow, 9).toString(); // Assuming landingPlace is in the tenth column (index 9)

        // Set the values to the respective components
        flightNo.setText(String.valueOf(selectedFlightNo));
        seatNo.setText(selectedSeatNo);
        ecoClass.setSelectedItem(selectedSeatClass);
        options.setText(selectedOptions);

        // Concatenate date and time and set the value for the departureDate JSpinner
        // Assuming departureDate is a JSpinner for date input
        String selectedDepartureDateTime = formatDateAndTime(selectedDepartureDate, selectedDepartureTime);
        SpinnerDateModel departureDateModel = (SpinnerDateModel) departureDate.getModel();
        String selectedArrivalDateTime = formatDateAndTime(selectedArrivalDate, selectedArrivalTime);
        SpinnerDateModel arrivalDateModel = (SpinnerDateModel) arrivalDate.getModel();
        try {
            Date departureDate = new SimpleDateFormat("M/d/yy, hh:mm aa").parse(selectedDepartureDateTime);
            departureDateModel.setValue(departureDate);
            Date arrivalDate = new SimpleDateFormat("M/d/yy, hh:mm aa").parse(selectedArrivalDateTime);
            arrivalDateModel.setValue(arrivalDate);
        } catch (java.text.ParseException e) {
            e.printStackTrace();
        }

        // Concatenate date and time and set the value for the arrivalDate JSpinner
        // Assuming arrivalDate is a JSpinner for date input
        departurePlace.setText(selectedDeparturePlace);
        landingPlace.setText(selectedLandingPlace);

    }//GEN-LAST:event_seatTableMouseClicked

    private void deleteSeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSeatActionPerformed
        try {
            String checkRes = "Select count(*) from reservation where seatNo=?";
            PreparedStatement preparedStatement = connection.prepareStatement(checkRes);
            preparedStatement.setString(1, seatNo.getText().trim());
            ResultSet rs = preparedStatement.executeQuery();
            if (rs.next()) {
                int count = rs.getInt(1);
                if (count > 0) {
                    JOptionPane.showMessageDialog(null, "Can't delete, it is registered");
                    return;
                }
            }
        } catch (Exception e) {

        }
        try {
            String seatDelete = seatNo.getText().trim(); // Get the seat number as a string
            if (seatDelete == "") {
                JOptionPane.showMessageDialog(null, "Enter the seatNo to delete");

                return;
            }
// Create the DELETE SQL query with a WHERE clause to match the seat number
            String deleteQuery = "DELETE FROM seat WHERE seatNo = ?";

            PreparedStatement preparedStatement = connection.prepareStatement(deleteQuery);
            preparedStatement.setString(1, seatDelete);

            int rowsAffected = preparedStatement.executeUpdate();
            if (rowsAffected == 1) {
                JOptionPane.showMessageDialog(null, "Deleted");

            } else {
                JOptionPane.showMessageDialog(null, "No");

            }
            updateDb();
        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_deleteSeatActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        try {

            String checkRes = "Select count(*) from reservation where seatNo=?";
            PreparedStatement preparedStatement = connection.prepareStatement(checkRes);
            preparedStatement.setString(1, seatNo.getText().trim());
            ResultSet rs = preparedStatement.executeQuery();
            if (rs.next()) {
                int count = rs.getInt(1);
                if (count > 0) {
                    JOptionPane.showMessageDialog(null, "Can't update, it is registered");
                    return;
                }
            }
        } catch (Exception e) {

        }
        try {
            if (isAnyFieldEmpty(this)) {
                JOptionPane.showMessageDialog(null, "Enter all Values!");
                return;

            }
            int flightNoo = 0;

            if (flightNo.getText().matches("\\d+")) {

                flightNoo = Integer.parseInt(flightNo.getText());
            } else {
                JOptionPane.showMessageDialog(null, "flightNo must be an Integer!");

                flightNo.setText("");
                return;
            }
            String seatNoo = seatNo.getText();
            //    JOptionPane.showMessageDialog(null, "batata");

            String ecoClasss = (String) ecoClass.getSelectedItem();
            ecoClasss = ecoClasss.substring(0, 1);

            String optionss = options.getText();

            String dateDep = departureDate.getValue().toString();
            String dateArr = arrivalDate.getValue().toString();
            Date date = null;
            SimpleDateFormat sdf = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
            SimpleDateFormat outputSdf = new SimpleDateFormat("M/d/yy, hh:mm aa");
            java.sql.Date sqlDepDate;
            java.sql.Time sqlDepTime;
            java.sql.Date sqlArrDate;
            java.sql.Time sqlArrTime;
            try {
                date = sdf.parse(dateArr);
                String formattedDate = outputSdf.format(date);
                sqlDepDate = new java.sql.Date(date.getTime());
                sqlDepTime = new java.sql.Time(date.getTime());

                date = sdf.parse(dateDep);
                formattedDate = outputSdf.format(date);
                sqlArrDate = new java.sql.Date(date.getTime());
                sqlArrTime = new java.sql.Time(date.getTime());

            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null, "Parsing Done wrong");
                return;
            }

            String landingPlacee = landingPlace.getText();
            String departurePlacee = departurePlace.getText();

            String seatNoValue = seatNo.getText().trim(); // Get the seat number from the textbox

            String updateQuery = "UPDATE seat SET flightNo = ?, class = ?, options = ?, departureDate = ?, departureTime = ?, departurePlace = ?, arrivalDate = ?, arrivalTime = ?, landingPlace = ? WHERE seatNo = ?";

            try {
                PreparedStatement preparedStatement = connection.prepareStatement(updateQuery);
                preparedStatement.setInt(1, flightNoo);
                preparedStatement.setString(2, String.valueOf(ecoClasss));
                preparedStatement.setString(3, optionss);
                preparedStatement.setDate(4, sqlDepDate);
                preparedStatement.setTime(5, sqlDepTime);
                preparedStatement.setString(6, departurePlacee);
                preparedStatement.setDate(7, sqlArrDate);
                preparedStatement.setTime(8, sqlArrTime);
                preparedStatement.setString(9, landingPlacee);
                preparedStatement.setString(10, seatNoValue); // Update the row where seatNo matches the value from the textbox

                int rowsAffected = preparedStatement.executeUpdate();

                if (rowsAffected > 0) {
                    // Row with the given seat number was updated successfully
                    JOptionPane.showMessageDialog(null, "Row with seat number " + seatNoValue + " was updated.");
                } else {
                    // Row with the given seat number was not found
                    JOptionPane.showMessageDialog(null, "Row with seat number " + seatNoValue + " was not found.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

            updateDb();
            //Helper.clearForm(this.getContentPane());
            clearThisForm();
            SpinnerDateModel dateModel = new SpinnerDateModel(new Date(), null, null, Calendar.HOUR_OF_DAY);
            dateModel.setValue(new Date()); // Set the initial value to the current date

            departureDate.setModel(dateModel);
            arrivalDate.setModel(dateModel);
            // TODO add your handling code here:
        } catch (Exception e) {

        }
    }//GEN-LAST:event_updateActionPerformed

    private void editReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editReservationActionPerformed
        Helper.clearForm(this.getContentPane());
        dispose();
        editReservation editRes = new editReservation();
        editRes.refreshReservationTable();
        editRes.show();
// TODO add your handling code here:
    }//GEN-LAST:event_editReservationActionPerformed

    private String formatDateAndTime(java.sql.Date date, java.sql.Time time) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yy");
        SimpleDateFormat timeFormat = new SimpleDateFormat("hh:mm aa");

        String formattedDate = dateFormat.format(date);
        String formattedTime = timeFormat.format(time);

        return formattedDate + ", " + formattedTime;
    }

    /**
     * @param args the command line arguments
     */
    public void updateDb() {
        try {
            String selectQuery = "SELECT * FROM seat";
            statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(selectQuery);
            DefaultTableModel seatTableModel = (DefaultTableModel) seatTable.getModel();
            seatTableModel.setRowCount(0);
            // Process and display the data (you can add it to a table)
            while (resultSet.next()) {
                int flightNoo = resultSet.getInt("flightNo");
                String seatNoo = resultSet.getString("seatNo");
                String seatClasss = resultSet.getString("class");
                String optionss = resultSet.getString("options");
                java.sql.Date departureDatee = resultSet.getDate("departureDate");
                java.sql.Time departureTimee = resultSet.getTime("departureTime");
                String departurePlacee = resultSet.getString("departurePlace");
                java.sql.Date arrivalDatee = resultSet.getDate("arrivalDate");
                java.sql.Time arrivalTimee = resultSet.getTime("arrivalTime");
                String landingPlacee = resultSet.getString("landingPlace");
                Vector<Object> row = new Vector<>();
                row.add(flightNoo);
                row.add(seatNoo);
                row.add(seatClasss);
                row.add(optionss);
                row.add(departureDatee);
                row.add(departureTimee);
                row.add(departurePlacee);
                row.add(arrivalDatee);
                row.add(arrivalTimee);
                row.add(landingPlacee);
                // Add the data to your Java table (e.g., JTable)
                seatTableModel.addRow(row);
            }

        } catch (Exception e) {

        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin().setVisible(true);
            }
        });
    }

    private void clearThisForm() {
        departurePlace.setText("");
        flightNo.setText("");
        landingPlace.setText("");
        options.setText("");
        seatNo.setText("");
        ecoClass.setSelectedIndex(0);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JSpinner arrivalDate;
    javax.swing.JSpinner departureDate;
    javax.swing.JTextField departurePlace;
    javax.swing.JComboBox<String> ecoClass;
    javax.swing.JTextField flightNo;
    javax.swing.JTextField landingPlace;
    javax.swing.JTextField options;
    javax.swing.JButton reset;
    javax.swing.JTextField seatNo;
    public javax.swing.JTable seatTable;
    // End of variables declaration//GEN-END:variables
}
